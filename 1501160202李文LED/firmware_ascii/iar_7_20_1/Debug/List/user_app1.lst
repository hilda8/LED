###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.1.14183/W32 for ARM       29/Oct/2018  14:10:03
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_common\application\user_app1.c
#    Command line =  
#        -f C:\Users\BAYE\AppData\Local\Temp\EWEA2E.tmp
#        (C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_common\application\user_app1.c
#        -D EIE1 --preprocess=c
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List
#        -lC
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List
#        -o
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\
#        -I
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\..\application\
#        -I
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I
#        D:\IAR\arm\CMSIS\Include\)
#    Locale       =  C
#    List file    =  
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_common\application\user_app1.c
      1          /**********************************************************************************************************************
Warning[Ms014]: some characters could not be correctly encoded in
          "C:\Users\BAYE\Documents\GitHub\Razor_Atmel\firmware_ascii\iar_7_20_
          1\Debug\List\user_app1.i", and have been replaced with '@'. The first
          such character has unicode code point 0x7760 ("@")
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_UserApp1"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp1_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp1_StateMachine;            /* The state machine function pointer */
   \                     UserApp1_StateMachine:
   \   00000000                      DS8 4
     61          //static u32 UserApp1_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          /*--------------------------------------------------------------------------------------------------------------------*/
     73          /* Protected functions                                                                                                */
     74          /*--------------------------------------------------------------------------------------------------------------------*/
     75          
     76          /*--------------------------------------------------------------------------------------------------------------------
     77          Function: UserApp1Initialize
     78          
     79          Description:
     80          Initializes the State Machine and its variables.
     81          
     82          Requires:
     83            -
     84          
     85          Promises:
     86            - 
     87          */

   \                                 In section .text, align 2, keep-with-next
     88          void UserApp1Initialize(void)
     89          {
   \                     UserApp1Initialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     90          
     91            /* If good initialization, set state to Idle */
     92            if( 1 )
     93            {
     94              UserApp1_StateMachine = UserApp1SM_Idle;
   \   00000002   0x.... 0x....      ADR.W    R0,UserApp1SM_Idle
   \   00000006   0x....             LDR.N    R1,??DataTable1
   \   00000008   0x6008             STR      R0,[R1, #+0]
     95            }
     96            else
     97            {
     98              /* The task isn't properly initialized, so shut it down and don't run */
     99              UserApp1_StateMachine = UserApp1SM_Error;
    100            }
    101            LedOn(WHITE); 
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       LedOn
    102            LedPWM(WHITE, LED_PWM_100);
   \   00000010   0x2114             MOVS     R1,#+20
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       LedPWM
    103            LedOn(PURPLE); 
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       LedOn
    104            LedPWM(PURPLE, LED_PWM_80);
   \   0000001E   0x2110             MOVS     R1,#+16
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       LedPWM
    105            LedOn(BLUE); 
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x.... 0x....      BL       LedOn
    106            LedPWM(BLUE, LED_PWM_70);
   \   0000002C   0x210E             MOVS     R1,#+14
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x.... 0x....      BL       LedPWM
    107            LedOn(CYAN);  
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x.... 0x....      BL       LedOn
    108            LedPWM(CYAN, LED_PWM_60);
   \   0000003A   0x210C             MOVS     R1,#+12
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0x.... 0x....      BL       LedPWM
    109            LedOn(GREEN); 
   \   00000042   0x2004             MOVS     R0,#+4
   \   00000044   0x.... 0x....      BL       LedOn
    110            LedPWM(GREEN, LED_PWM_50);
   \   00000048   0x210A             MOVS     R1,#+10
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0x.... 0x....      BL       LedPWM
    111            LedOn(YELLOW);
   \   00000050   0x2005             MOVS     R0,#+5
   \   00000052   0x.... 0x....      BL       LedOn
    112            LedPWM(YELLOW, LED_PWM_40);  
   \   00000056   0x2108             MOVS     R1,#+8
   \   00000058   0x2005             MOVS     R0,#+5
   \   0000005A   0x.... 0x....      BL       LedPWM
    113            LedOn(ORANGE); 
   \   0000005E   0x2006             MOVS     R0,#+6
   \   00000060   0x.... 0x....      BL       LedOn
    114            LedPWM(ORANGE, LED_PWM_30);
   \   00000064   0x2106             MOVS     R1,#+6
   \   00000066   0x2006             MOVS     R0,#+6
   \   00000068   0x.... 0x....      BL       LedPWM
    115            LedOn(RED);  
   \   0000006C   0x2007             MOVS     R0,#+7
   \   0000006E   0x.... 0x....      BL       LedOn
    116            LedPWM(RED, LED_PWM_20);
   \   00000072   0x2104             MOVS     R1,#+4
   \   00000074   0x2007             MOVS     R0,#+7
   \   00000076   0x.... 0x....      BL       LedPWM
    117          } /* end UserApp1Initialize() */
   \   0000007A   0xBD01             POP      {R0,PC}          ;; return
    118          
    119            
    120          /*----------------------------------------------------------------------------------------------------------------------
    121          Function UserApp1RunActiveState()
    122          
    123          Description:
    124          Selects and runs one iteration of the current state in the state machine.
    125          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    126          may take 1ms / n to execute.
    127          
    128          Requires:
    129            - State machine function pointer points at current state
    130          
    131          Promises:
    132            - Calls the function to pointed by the state machine function pointer
    133          */ 

   \                                 In section .bss, align 4
    134            static u32 u16BlinkCount= 0; 
   \                     u16BlinkCount:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    135          void UserApp1RunActiveState(void)
    136          {
   \                     UserApp1RunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    137            UserApp1_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    138          //      LedToggle(WHITE); 
    139          //   LedToggle(PURPLE); 
    140          //    LedToggle(BLUE); 
    141          //     LedToggle(YELLOW); 
    142          //
    143            LedOff(WHITE);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       LedOff
    144             LedOff(PURPLE);
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       LedOff
    145             LedOff(BLUE);
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x.... 0x....      BL       LedOff
    146             LedOff(CYAN);
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x.... 0x....      BL       LedOff
    147             LedOff(GREEN);
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x.... 0x....      BL       LedOff
    148             LedOff(YELLOW);
   \   00000026   0x2005             MOVS     R0,#+5
   \   00000028   0x.... 0x....      BL       LedOff
    149             LedOff(ORANGE);
   \   0000002C   0x2006             MOVS     R0,#+6
   \   0000002E   0x.... 0x....      BL       LedOff
    150             LedOff(RED);
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x.... 0x....      BL       LedOff
    151             while(1)
    152             {
    153               u16BlinkCount++;
   \                     ??UserApp1RunActiveState_0: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable1_1
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x....             LDR.N    R1,??DataTable1_1
   \   00000040   0x6008             STR      R0,[R1, #+0]
    154             // if(u16BlinkCount>=0 && u16BlinkCount<200000)
    155              if(u16BlinkCount==20000)
   \   00000042   0x....             LDR.N    R0,??DataTable1_1
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF644 0x6120      MOVW     R1,#+20000
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xD109             BNE.N    ??UserApp1RunActiveState_1
    156               {
    157                 LedOn(WHITE); 
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       LedOn
    158                 LedPWM(WHITE, LED_PWM_100);
   \   00000054   0x2114             MOVS     R1,#+20
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x.... 0x....      BL       LedPWM
    159                 LedOff(RED); 
   \   0000005C   0x2007             MOVS     R0,#+7
   \   0000005E   0x.... 0x....      BL       LedOff
    160               }
    161              // if(u16BlinkCount >= 200000&& u16BlinkCount<=350000)
    162              if(u16BlinkCount == 200000)
   \                     ??UserApp1RunActiveState_1: (+1)
   \   00000062   0x....             LDR.N    R0,??DataTable1_1
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x....             LDR.N    R1,??DataTable1_2  ;; 0x30d40
   \   00000068   0x4288             CMP      R0,R1
   \   0000006A   0xD109             BNE.N    ??UserApp1RunActiveState_2
    163               {
    164                 LedOn(PURPLE);
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x.... 0x....      BL       LedOn
    165                 LedPWM(PURPLE, LED_PWM_80);
   \   00000072   0x2110             MOVS     R1,#+16
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x.... 0x....      BL       LedPWM
    166                 LedOff(WHITE); 
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      BL       LedOff
    167               }  
    168              // if(u16BlinkCount >= 350000 && u16BlinkCount<=450000 )
    169               if(u16BlinkCount == 350000)
   \                     ??UserApp1RunActiveState_2: (+1)
   \   00000080   0x....             LDR.N    R0,??DataTable1_1
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x....             LDR.N    R1,??DataTable1_3  ;; 0x55730
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD109             BNE.N    ??UserApp1RunActiveState_3
    170               {
    171                 LedOn(BLUE);
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x.... 0x....      BL       LedOn
    172                 LedPWM(BLUE, LED_PWM_70);
   \   00000090   0x210E             MOVS     R1,#+14
   \   00000092   0x2002             MOVS     R0,#+2
   \   00000094   0x.... 0x....      BL       LedPWM
    173                 LedOff(PURPLE);
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x.... 0x....      BL       LedOff
    174               }  
    175               
    176              // if(u16BlinkCount >= 450000 && u16BlinkCount<=530000 )
    177               if(u16BlinkCount == 450000)
   \                     ??UserApp1RunActiveState_3: (+1)
   \   0000009E   0x....             LDR.N    R0,??DataTable1_1
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x....             LDR.N    R1,??DataTable1_4  ;; 0x6ddd0
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD109             BNE.N    ??UserApp1RunActiveState_4
    178               {
    179                 LedOn(CYAN);
   \   000000A8   0x2003             MOVS     R0,#+3
   \   000000AA   0x.... 0x....      BL       LedOn
    180                 LedPWM(CYAN, LED_PWM_60);
   \   000000AE   0x210C             MOVS     R1,#+12
   \   000000B0   0x2003             MOVS     R0,#+3
   \   000000B2   0x.... 0x....      BL       LedPWM
    181                  LedOff(BLUE);
   \   000000B6   0x2002             MOVS     R0,#+2
   \   000000B8   0x.... 0x....      BL       LedOff
    182               } 
    183               //if(u16BlinkCount >= 530000 && u16BlinkCount<=600000)
    184                 if(u16BlinkCount == 530000)
   \                     ??UserApp1RunActiveState_4: (+1)
   \   000000BC   0x....             LDR.N    R0,??DataTable1_1
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x....             LDR.N    R1,??DataTable1_5  ;; 0x81650
   \   000000C2   0x4288             CMP      R0,R1
   \   000000C4   0xD109             BNE.N    ??UserApp1RunActiveState_5
    185               {
    186                 LedOn(GREEN);
   \   000000C6   0x2004             MOVS     R0,#+4
   \   000000C8   0x.... 0x....      BL       LedOn
    187                 LedPWM(GREEN, LED_PWM_50);
   \   000000CC   0x210A             MOVS     R1,#+10
   \   000000CE   0x2004             MOVS     R0,#+4
   \   000000D0   0x.... 0x....      BL       LedPWM
    188                 LedOff(CYAN);
   \   000000D4   0x2003             MOVS     R0,#+3
   \   000000D6   0x.... 0x....      BL       LedOff
    189               } 
    190             //if(u16BlinkCount >= 600000 && u16BlinkCount<=660000)
    191               if(u16BlinkCount == 600000)
   \                     ??UserApp1RunActiveState_5: (+1)
   \   000000DA   0x....             LDR.N    R0,??DataTable1_1
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0x....             LDR.N    R1,??DataTable1_6  ;; 0x927c0
   \   000000E0   0x4288             CMP      R0,R1
   \   000000E2   0xD109             BNE.N    ??UserApp1RunActiveState_6
    192               {
    193                 LedOn(YELLOW);
   \   000000E4   0x2005             MOVS     R0,#+5
   \   000000E6   0x.... 0x....      BL       LedOn
    194                 LedPWM(YELLOW, LED_PWM_40);
   \   000000EA   0x2108             MOVS     R1,#+8
   \   000000EC   0x2005             MOVS     R0,#+5
   \   000000EE   0x.... 0x....      BL       LedPWM
    195                 LedOff(GREEN);
   \   000000F2   0x2004             MOVS     R0,#+4
   \   000000F4   0x.... 0x....      BL       LedOff
    196               } 
    197              //if(u16BlinkCount >= 660000 && u16BlinkCount<=700000)
    198             if(u16BlinkCount == 660000)
   \                     ??UserApp1RunActiveState_6: (+1)
   \   000000F8   0x....             LDR.N    R0,??DataTable1_1
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0x....             LDR.N    R1,??DataTable1_7  ;; 0xa1220
   \   000000FE   0x4288             CMP      R0,R1
   \   00000100   0xD109             BNE.N    ??UserApp1RunActiveState_7
    199               { 
    200                 LedOn(ORANGE);
   \   00000102   0x2006             MOVS     R0,#+6
   \   00000104   0x.... 0x....      BL       LedOn
    201                 LedPWM(YELLOW, LED_PWM_20); 
   \   00000108   0x2104             MOVS     R1,#+4
   \   0000010A   0x2005             MOVS     R0,#+5
   \   0000010C   0x.... 0x....      BL       LedPWM
    202                 LedOff(YELLOW);
   \   00000110   0x2005             MOVS     R0,#+5
   \   00000112   0x.... 0x....      BL       LedOff
    203               }
    204             // if(u16BlinkCount >= 700000 &&  u16BlinkCount<=720000)
    205               if(u16BlinkCount == 700000)
   \                     ??UserApp1RunActiveState_7: (+1)
   \   00000116   0x....             LDR.N    R0,??DataTable1_1
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0x....             LDR.N    R1,??DataTable1_8  ;; 0xaae60
   \   0000011C   0x4288             CMP      R0,R1
   \   0000011E   0xD18B             BNE.N    ??UserApp1RunActiveState_0
    206               {
    207                 LedOff(ORANGE);
   \   00000120   0x2006             MOVS     R0,#+6
   \   00000122   0x.... 0x....      BL       LedOff
    208                 LedOn(RED);
   \   00000126   0x2007             MOVS     R0,#+7
   \   00000128   0x.... 0x....      BL       LedOn
    209                 LedPWM(RED, LED_PWM_10); 
   \   0000012C   0x2102             MOVS     R1,#+2
   \   0000012E   0x2007             MOVS     R0,#+7
   \   00000130   0x.... 0x....      BL       LedPWM
    210                 u16BlinkCount=0;
   \   00000134   0x2000             MOVS     R0,#+0
   \   00000136   0x....             LDR.N    R1,??DataTable1_1
   \   00000138   0x6008             STR      R0,[R1, #+0]
   \   0000013A   0xE77D             B.N      ??UserApp1RunActiveState_0
    211               }
    212             }
    213          
    214          
    215          } /* end UserApp1RunActiveState */
    216          
    217          
    218          /*--------------------------------------------------------------------------------------------------------------------*/
    219          /* Private functions                                                                                                  */
    220          /*--------------------------------------------------------------------------------------------------------------------*/
    221          
    222          
    223          /**********************************************************************************************************************
    224          State Machine Function Definitions
    225          **********************************************************************************************************************/
    226          
    227          /*-------------------------------------------------------------------------------------------------------------------*/
    228          /* Wait for ??? */

   \                                 In section .text, align 4, keep-with-next
    229          static void UserApp1SM_Idle(void)
    230          {
    231          
    232          } /* end UserApp1SM_Idle() */
   \                     UserApp1SM_Idle: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     u16BlinkCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x00030D40         DC32     0x30d40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x00055730         DC32     0x55730

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x0006DDD0         DC32     0x6ddd0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x00081650         DC32     0x81650

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x000927C0         DC32     0x927c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x000A1220         DC32     0xa1220

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x000AAE60         DC32     0xaae60
    233              
    234          
    235          /*-------------------------------------------------------------------------------------------------------------------*/
    236          /* Handle an error */
    237          static void UserApp1SM_Error(void)          
    238          {
    239            
    240          } /* end UserApp1SM_Error() */
    241          
    242          
    243          
    244          /*--------------------------------------------------------------------------------------------------------------------*/
    245          /* End of File                                                                                                        */
    246          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   UserApp1Initialize
         8   -> LedOn
         8   -> LedPWM
       8   UserApp1RunActiveState
         8   -- Indirect call
         8   -> LedOff
         8   -> LedOn
         8   -> LedPWM
       0   UserApp1SM_Idle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  G_u32UserApp1Flags
     124  UserApp1Initialize
     316  UserApp1RunActiveState
       2  UserApp1SM_Idle
       4  UserApp1_StateMachine
       4  u16BlinkCount

 
  12 bytes in section .bss
 478 bytes in section .text
 
 478 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: 1
